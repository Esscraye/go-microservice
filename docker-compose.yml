services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: microservices
    ports:
      - '5432:5432'
    networks:
      - microservices-network
    volumes:
      - ./db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth-service:
    build: ./auth-service
    ports:
      - '8080:8080'
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  user-service:
    build: ./user-service
    ports:
      - '8082:8082'
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  product-service:
    build: ./product-service
    ports:
      - '8081:8081'
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  order-service:
    build: ./order-service
    ports:
      - '8083:8083'
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  payment-service:
    build: ./payment-service
    ports:
      - '8084:8084'
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  notification-service:
    build: ./notification-service
    ports:
      - '8085:8085'
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  web-service:
    build:
      context: ./web-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    environment:
      - NODE_ENV=production

  i2p:
    container_name: i2pd
    image: purplei2p/i2pd:latest
    restart: unless-stopped
    ports:
      - 7070:7070
      - 6490:6490
    volumes:
      - ./i2p/tunnels.conf:/home/i2pd/data/tunnels.conf
      - ./i2p/i2p.conf:/home/i2pd/data/i2pd.conf
    networks:
      - microservices-network
networks:
  microservices-network:
    driver: bridge